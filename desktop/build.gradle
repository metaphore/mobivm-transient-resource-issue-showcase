apply plugin: 'application'

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.metaphore.transientresourcetest.desktop.DesktopLauncher'
eclipse.project.name = appName + '-desktop'
sourceCompatibility = 1.8

//project.ext.lwjglVersion = "3.3.0"
//project.ext.lwjglMacosNatives = "natives-macos-arm64"
//
//def nativePlatforms = [
//		"natives-windows",
//		"natives-windows-x86",
//		"natives-linux",
//		"natives-linux-arm32",
//		"natives-linux-arm64",
//		"natives-macos",
//		"natives-macos-arm64"
//]

dependencies {
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation project(':core')

//	// This is a temporary LWJGL 3.3 snapshot version override,
//	// as current LibGDX (1.10.0) is stuck with LWJGL 3.2 which doesn't yet support M1 macOS.
//	//TODO Update/remove when stable LWJGL 3.3 is out or LibGDX official backend adds support for ARM macOS.
//	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
//	implementation "org.lwjgl:lwjgl"
//	implementation "org.lwjgl:lwjgl-glfw"
//	implementation "org.lwjgl:lwjgl-jemalloc"
//	implementation "org.lwjgl:lwjgl-openal"
//	implementation "org.lwjgl:lwjgl-opengl"
//	nativePlatforms.each {
//		runtimeOnly "org.lwjgl:lwjgl::$it"
//		runtimeOnly "org.lwjgl:lwjgl-glfw::$it"
//		runtimeOnly "org.lwjgl:lwjgl-jemalloc::$it"
//		runtimeOnly "org.lwjgl:lwjgl-openal::$it"
//		runtimeOnly "org.lwjgl:lwjgl-opengl::$it"
//	}
}

def os = System.properties['os.name'].toLowerCase()

run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)

	if (os.contains('mac')) {
		// Required to run LWJGL3 Java apps on MacOS
		jvmArgs += "-XstartOnFirstThread"
	}
}

jar {
// sets the name of the .jar file this produces to the name of the game or app.
	archiveBaseName.set(appName)
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
// setting the manifest makes the JAR runnable.
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
// this last step may help on some OSes that need extra instruction to make runnable JARs.
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
task dist(dependsOn: [jar]) {
}
